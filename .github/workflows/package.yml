name: Wheels

on:
  workflow_dispatch:
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

jobs:
  build_wheels:
    name: Build wheels for ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macos-13 is an intel runner, macos-14 is apple silicon
          - os: macos-13
            python: '3.8'
            build: 'cp38-macosx_x86_64'
            target: '13.0'
            prefix: /usr/local

          - os: macos-13
            python: '3.9'
            build: 'cp39-macosx_x86_64'
            target: '13.0'
            prefix: /usr/local

          - os: macos-13
            python: '3.10'
            build: 'cp310-macosx_x86_64'
            target: '13.0'
            prefix: /usr/local

          - os: macos-13
            python: '3.11'
            build: 'cp311-macosx_x86_64'
            target: '13.0'
            prefix: /usr/local

          - os: macos-13
            python: '3.12'
            build: 'cp312-macosx_x86_64'
            target: '13.0'
            prefix: /usr/local

          - os: macos-14
            python: '3.9'
            build: 'cp39-macosx_arm64'
            target: '14.0'
            prefix: /opt/homebrew

          - os: macos-14
            python: '3.10'
            build: 'cp310-macosx_arm64'
            target: '14.0'
            prefix: /opt/homebrew

          - os: macos-14
            python: '3.11'
            build: 'cp311-macosx_arm64'
            target: '14.0'
            prefix: /opt/homebrew

          - os: macos-14
            python: '3.12'
            build: 'cp312-macosx_arm64'
            target: '14.0'
            prefix: /opt/homebrew

          - os: ubuntu-latest
            python: '3.12'
            build: 'cp*-manylinux_x86_64'
            prefix: /usr

    steps:
      - name: Setup environment
        run: echo "PREFIX=${{ matrix.prefix }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # Used to host cibuildwheel
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Setup macOS environment
        if: runner.os == 'macOS'
        run: |
          brew install automake libtool
          echo "MACOSX_DEPLOYMENT_TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          echo CPPFLAGS="`python3-config --includes`" >> $GITHUB_ENV

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.21.3

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse bindings/python
        env:
          CIBW_BUILD: ${{ matrix.build }}
          CIBW_SKIP: cp36* cp37* cp313*
          CIBW_BEFORE_ALL_LINUX: >
            yum install -y bzip2-devel flac-devel xz-devel pcre-devel zziplib-devel &&
            .github/workflows/bootstrap.sh --disable-python &&
            make
          CIBW_BEFORE_ALL_MACOS: >
            brew install bzip2 flac xz pcre libzzip &&
            .github/workflows/bootstrap.sh --disable-python &&
            make
          CIBW_BEFORE_BUILD: >
            python -m pip install oldest-supported-numpy &&
            .github/workflows/bootstrap.sh &&
            make -C bindings/python pyconstants.c
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            LD_LIBRARY_PATH=$PWD/src/.libs auditwheel repair -w {dest_dir} {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            DYLD_LIBRARY_PATH=$PWD/src/.libs delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
          CIBW_BUILD_VERBOSITY: 1
          CIBW_TEST_COMMAND: >
            cd {package}/test &&
            PYTHONPATH=`python -c 'import sysconfig; print(sysconfig.get_paths()["purelib"])'`:$PYTHONPATH make check

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheel-${{ matrix.os }}-${{ matrix.python }}
          path: ./wheelhouse/pygetdata*.whl

  upload_pypi:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
